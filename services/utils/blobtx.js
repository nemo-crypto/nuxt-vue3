// source: pay_for_blob.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide("proto.BlobTx")

goog.require("jspb.BinaryReader")
goog.require("jspb.BinaryWriter")
goog.require("jspb.Message")
goog.require("proto.Blob")

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlobTx = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, proto.BlobTx.repeatedFields_, null)
}
goog.inherits(proto.BlobTx, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.BlobTx.displayName = "proto.BlobTx"
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BlobTx.repeatedFields_ = [2]

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.BlobTx.prototype.toObject = function (opt_includeInstance) {
		return proto.BlobTx.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.BlobTx} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.BlobTx.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				tx: msg.getTx_asB64(),
				blobsList: jspb.Message.toObjectList(msg.getBlobsList(), proto.Blob.toObject, includeInstance),
				typeId: jspb.Message.getFieldWithDefault(msg, 3, ""),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlobTx}
 */
proto.BlobTx.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.BlobTx()
	return proto.BlobTx.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlobTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlobTx}
 */
proto.BlobTx.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes())
				msg.setTx(value)
				break
			case 2:
				var value = new proto.Blob()
				reader.readMessage(value, proto.Blob.deserializeBinaryFromReader)
				msg.addBlobs(value)
				break
			case 3:
				var value = /** @type {string} */ (reader.readString())
				msg.setTypeId(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlobTx.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.BlobTx.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlobTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlobTx.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getTx_asU8()
	if (f.length > 0) {
		writer.writeBytes(1, f)
	}
	f = message.getBlobsList()
	if (f.length > 0) {
		writer.writeRepeatedMessage(2, f, proto.Blob.serializeBinaryToWriter)
	}
	f = message.getTypeId()
	if (f.length > 0) {
		writer.writeString(3, f)
	}
}

/**
 * optional bytes tx = 1;
 * @return {string}
 */
proto.BlobTx.prototype.getTx = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * optional bytes tx = 1;
 * This is a type-conversion wrapper around `getTx()`
 * @return {string}
 */
proto.BlobTx.prototype.getTx_asB64 = function () {
	return /** @type {string} */ (jspb.Message.bytesAsB64(this.getTx()))
}

/**
 * optional bytes tx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTx()`
 * @return {!Uint8Array}
 */
proto.BlobTx.prototype.getTx_asU8 = function () {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getTx()))
}

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BlobTx} returns this
 */
proto.BlobTx.prototype.setTx = function (value) {
	return jspb.Message.setProto3BytesField(this, 1, value)
}

/**
 * repeated Blob blobs = 2;
 * @return {!Array<!proto.Blob>}
 */
proto.BlobTx.prototype.getBlobsList = function () {
	return /** @type{!Array<!proto.Blob>} */ (jspb.Message.getRepeatedWrapperField(this, proto.Blob, 2))
}

/**
 * @param {!Array<!proto.Blob>} value
 * @return {!proto.BlobTx} returns this
 */
proto.BlobTx.prototype.setBlobsList = function (value) {
	return jspb.Message.setRepeatedWrapperField(this, 2, value)
}

/**
 * @param {!proto.Blob=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Blob}
 */
proto.BlobTx.prototype.addBlobs = function (opt_value, opt_index) {
	return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Blob, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.BlobTx} returns this
 */
proto.BlobTx.prototype.clearBlobsList = function () {
	return this.setBlobsList([])
}

/**
 * optional string type_id = 3;
 * @return {string}
 */
proto.BlobTx.prototype.getTypeId = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}

/**
 * @param {string} value
 * @return {!proto.BlobTx} returns this
 */
proto.BlobTx.prototype.setTypeId = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value)
}
